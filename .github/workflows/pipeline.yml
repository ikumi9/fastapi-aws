name: Docker Build and Scan Test

on:
  workflow_dispatch:
  push:
    branches:
      - master


jobs:
  dev:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
   

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with Black
        uses: rickstaa/action-black@v1
        with:
          black_args: ". --check"

      - name: Build App
        run: |
          cp .env.example .env
          make build

      - name: Run App
        run: |
          make run
          sleep 10

      # - name: build and Run App
      #   run: |
      #     cp .env.example .env
      #     make build-and-run
      #     sleep 30

      - name: Test app with Curl
        run: |
          curl http://127.0.0.1:8000/api/v1/brands/list

      - name: Run Pytest
        run: |
          pytest tests/

      - name: Destroy App
        run: |
          make destroy

  build:
    needs: dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t isaackumi/docker-bc-cicd-demo:latest . -f multi.Dockerfile

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.43.0/trivy_0.43.0_Linux-64bit.tar.gz
          tar zxvf trivy_0.43.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Scan Docker Image with Trivy
        run: trivy image --severity HIGH --no-progress isaackumi/docker-bc-cicd-demo:latest

  push:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Automatic Tagging of Releases
        uses: rymndhng/release-on-push-action@master
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          tag_prefix: ""
          bump_version_scheme: patch
          release_body: "The official release demo api "

      - name: Check Release Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: zindi-workshop
#          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:${{ steps.release.outputs.version }} . -f multi.Dockerfile
          docker push $REGISTRY/$REPOSITORY:${{ steps.release.outputs.version }}  

      - name: Notify finish deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.1
        id: rollbar_post_deploy
        with:
          environment: 'production'
          version: ${{ github.sha }}
          status: 'succeeded'
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_ACCESS_TOKEN }}
          ROLLBAR_USERNAME: ${{ github.actor }}
          DEPLOY_ID: ${{ steps.rollbar_pre_deploy.outputs.deploy_id }}
